{"version":3,"sources":["components/Post.jsx","App.js","reportWebVitals.js","index.js"],"names":["Post","props","useState","isOpened","setIsOpened","ref","useRef","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","useOnClickOutside","authorName","authorCatchPhrase","postTitle","postBody","postId","className","onClick","App","posts","setPosts","authors","setAuthors","axios","get","then","res","data","catch","err","console","error","map","post","userId","name","company","catchPhrase","title","body","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+OAwDeA,EAtDF,SAACC,GAAW,IAAD,EACUC,oBAAS,GADnB,mBACfC,EADe,KACLC,EADK,KAEhBC,EAAMC,oBAsDd,SAA2BD,EAAKE,GAC9BC,qBAAU,WACR,IAAMC,EAAW,SAACC,GAEXL,EAAIM,UAAWN,EAAIM,QAAQC,SAASF,EAAMG,SAI/CN,EAAQG,IAMV,OAHAI,SAASC,iBAAiB,YAAaN,GACvCK,SAASC,iBAAiB,aAAcN,GAEjC,WACLK,SAASE,oBAAoB,YAAaP,GAC1CK,SAASE,oBAAoB,aAAcP,MAE5C,IAvEHQ,CAAkBZ,GAAK,SAACF,GAAD,OAAcC,GAAY,MAH3B,IAIdc,EAA+DjB,EAA/DiB,WAAYC,EAAmDlB,EAAnDkB,kBAAmBC,EAAgCnB,EAAhCmB,UAAWC,EAAqBpB,EAArBoB,SAAUC,EAAWrB,EAAXqB,OAK5D,OACE,sBACEC,UAAU,uEACVlB,IAAKA,EACLmB,QAAS,SAACd,GANZN,GAAaD,IAGb,UAKE,oBACEoB,WACe,IAAbpB,EAAqB,8BAAgC,kBAFzD,WAKgB,IAAbA,GAAsBmB,EAAS,KAChC,sBAAMC,UAAU,mBAAhB,SACGpB,GAAY,kBACP,IACPiB,KAEFjB,GACC,gCACE,8BACE,sBAAMoB,UAAU,mBAAhB,4BAAyD,IACxDL,KAEH,8BACE,sBAAMK,UAAU,mBAAhB,oCAAiE,IAChEJ,KAEH,8BACE,sBAAMI,UAAU,mBAAhB,2BACCF,KAEH,qBAAKE,UAAU,cAAf,SACE,wBACEA,UAAU,oCACVC,QAAS,SAACd,GAAD,OAAWN,GAAY,IAFlC,4BCqBGqB,MA/Cf,WAAgB,IAAD,EACavB,mBAAS,MADtB,mBACNwB,EADM,KACCC,EADD,OAEiBzB,mBAAS,MAF1B,mBAEN0B,EAFM,KAEGC,EAFH,KAuBb,OAnBArB,qBAAU,WACRsB,IACGC,IAAI,8CACJC,MAAK,SAACC,GACLN,EAASM,EAAIC,SAEdC,OAAM,SAACC,GACNC,QAAQC,MAAMF,MAElBN,IACGC,IAAI,+CACJC,MAAK,SAACC,GACLJ,EAAWI,EAAIC,SAEhBC,OAAM,SAACC,GACNC,QAAQC,MAAMF,QAEjB,IAEW,OAAVV,GAA8B,OAAZE,EACb,aAGP,sBAAKL,UAAU,mBAAf,UACE,oBAAIA,UAAU,mBAAd,0CACA,qBAAKA,UAAU,cAAf,SACGG,EAAMa,KAAI,SAACC,GACV,OACE,cAAC,EAAD,CAEEtB,WAAYU,EAAQY,EAAKC,OAAS,GAAGC,KACrCvB,kBAAmBS,EAAQY,EAAKC,OAAS,GAAGE,QAAQC,YACpDxB,UAAWoB,EAAKK,MAChBxB,SAAUmB,EAAKM,KACfxB,OAAQkB,EAAKO,IALRP,EAAKO,aCtCTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5C,SAAS6C,eAAe,SAM1BX,M","file":"static/js/main.c983d2e8.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Post = (props) => {\r\n  const [isOpened, setIsOpened] = useState(false);\r\n  const ref = useRef();\r\n  useOnClickOutside(ref, (isOpened) => setIsOpened(false));\r\n  const { authorName, authorCatchPhrase, postTitle, postBody, postId } = props;\r\n\r\n  function handleClick(postId) {\r\n    setIsOpened(!isOpened);\r\n  }\r\n  return (\r\n    <div\r\n      className=\"post col-lg-10 col-md-8 col-sm-12 text-white shadow mb-2 p-3 rounded\"\r\n      ref={ref}\r\n      onClick={(event) => handleClick(postId)}\r\n    >\r\n      <p\r\n        className={\r\n          isOpened === false ? \"text-center text-capitalize\" : \"text-capitalize\"\r\n        }\r\n      >\r\n        {isOpened === false && postId + \". \"}\r\n        <span className=\"font-weight-bold\">\r\n          {isOpened && \"Post's title:\"}\r\n        </span>{\" \"}\r\n        {postTitle}\r\n      </p>\r\n      {isOpened && (\r\n        <div>\r\n          <p>\r\n            <span className=\"font-weight-bold\">Author's name:</span>{\" \"}\r\n            {authorName}\r\n          </p>\r\n          <p>\r\n            <span className=\"font-weight-bold\">Author's catch phrase:</span>{\" \"}\r\n            {authorCatchPhrase}\r\n          </p>\r\n          <p>\r\n            <span className=\"font-weight-bold\">Post's body: </span>\r\n            {postBody}\r\n          </p>\r\n          <div className=\"text-center\">\r\n            <button\r\n              className=\"btn btn-warning shadow text-white\"\r\n              onClick={(event) => setIsOpened(false)}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n\r\nfunction useOnClickOutside(ref, handler) {\r\n  useEffect(() => {\r\n    const listener = (event) => {\r\n      // Do nothing if clicking ref's element or descendent elements\r\n      if (!ref.current || ref.current.contains(event.target)) {\r\n        return;\r\n      }\r\n\r\n      handler(event);\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", listener);\r\n    document.addEventListener(\"touchstart\", listener);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", listener);\r\n      document.removeEventListener(\"touchstart\", listener);\r\n    };\r\n  }, []);\r\n}\r\n","// import logo from './logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Post from \"./components/Post\";\n\n// Trinh's comments:\n// These are the steps I've taken:\n// 1. Implement useEffect to fetch the posts and users from the given API at page load, and store them in 2 pieces of object variable state called posts and author.\n// 2. The app returns a list of posts (in the posts.map() function). Each post includes the 4 points of information as requested by this assignment.\n// To separate concern, I've created a component called Post to define the structure and behaviors of each post\n// In the posts.map() function, the information from the posts and authors variable will be passed to each post.\n\n// Post component:\n//  - The post title is always on display. Clicking on the title toggles will change the value of state variable \"isOpened\", which will open/close the content.\n//  - The Close button at the end of the post content will close the content. Clicking on the Close button  state variable \"isOpened\" to false, which will close the content.\n// - I had some styling in App.css, and also used Bootstrap for responsive styling\nfunction App() {\n  const [posts, setPosts] = useState(null);\n  const [authors, setAuthors] = useState(null);\n\n  useEffect(() => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/posts\")\n      .then((res) => {\n        setPosts(res.data);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users/\")\n      .then((res) => {\n        setAuthors(res.data);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }, []);\n\n  if (posts === null || authors === null) {\n    return \"Loading...\";\n  }\n  return (\n    <div className=\"App mx-2 blinkBg\">\n      <h2 className=\"text-center mb-4\">PridePlaces Coding Challenge</h2>\n      <div className=\"postWrapper\">\n        {posts.map((post) => {\n          return (\n            <Post\n              key={post.id}\n              authorName={authors[post.userId - 1].name}\n              authorCatchPhrase={authors[post.userId - 1].company.catchPhrase}\n              postTitle={post.title}\n              postBody={post.body}\n              postId={post.id}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}